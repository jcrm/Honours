Texture2D g_Texture2D;
Texture3D g_Texture3D;
TextureCube g_TextureCube;

int g_UseCase;

SamplerState samLinear{
    Filter = MIN_MAG_LINEAR_MIP_POINT;
};
struct PixelInputType{  
    float4 Pos : SV_POSITION; 
    float3 Tex : TEXCOORD0;
}; 

float4 SimplePixelShader(PixelInputType f) : SV_Target
{
    if (g_UseCase == 0) return g_Texture2D.Sample( samLinear, f.Tex.xy );  
    else if (g_UseCase == 1) return g_Texture3D.Sample( samLinear, f.Tex );  
    else if (g_UseCase == 2) return g_TextureCube.Sample( samLinear, float3(f.Tex.xy, 1.0) );  
    else if (g_UseCase == 3) return g_TextureCube.Sample( samLinear, float3(f.Tex.xy, -1.0) );  
    else if (g_UseCase == 4) return g_TextureCube.Sample( samLinear, float3(1.0, f.Tex.xy) );  
    else if (g_UseCase == 5) return g_TextureCube.Sample( samLinear, float3(-1.0, f.Tex.xy) );  
    else if (g_UseCase == 6) return g_TextureCube.Sample( samLinear, float3(f.Tex.x, 1.0, f.Tex.y) );  
    else if (g_UseCase == 7) return g_TextureCube.Sample( samLinear, float3(f.Tex.x, -1.0, f.Tex.y) );  
    else return float4(f.Tex, 1); 
};